Magic Square

A magic square of order n is a square arrangement of n2 numbers, typically distinct integers, where the sum of the n numbers in each row, each column, and both main diagonals is the same constant. It consists of the integers from 1 to .

The constant sum of each row, column, and diagonal in a magic square is known as the magic constant or magic sum, M. For a normal magic square, this constant depends solely on n and is given by the formula:

M=(n(n2+1))/2

For normal magic squares of order n = 3,4,5,...,

the magic constants are: 15,34,65,111,175,260,...

Given a matrix, check whether it’s Magic Square or not.

Input Format:
An integer value for n (n>2)
An nXn matrix

Output Format:
If the given matrix is magic square then print “Magic Matrix”, otherwise “Not a Magic Matrix

#
def is_magic_square(n, matrix):
    # Calculate the magic constant M
    M = n * (n**2 + 1) // 2
    
    # Check sum of rows
    for i in range(n):
        if sum(matrix[i]) != M:
            return "Not a Magic Matrix"
    
    # Check sum of columns
    for j in range(n):
        if sum(matrix[i][j] for i in range(n)) != M:
            return "Not a Magic Matrix"
    
    # Check sum of main diagonal
    if sum(matrix[i][i] for i in range(n)) != M:
        return "Not a Magic Matrix"
    
    # Check sum of secondary diagonal
    if sum(matrix[i][n-i-1] for i in range(n)) != M:
        return "Not a Magic Matrix"
    
    # If all checks pass, 
    # It's a magic square
    return "Magic Matrix"

# Input
n = int(input())
matrix = [list(map(int, input().split())) for _ in range(n)]

# Output the result
print(is_magic_square(n, matrix),end="")
n = int(input())
matrix = [list(map(int, input().split())) for _ in range(n)]

print(is_magic_square(matrix, n))
