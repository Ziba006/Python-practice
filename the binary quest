The Binary Quest

Alex, a young programmer, discovered a challenge: Convert a decimal number to binary using recursion! The rules were simple—no loops, no built-in functions —only the magic of recursion.

 Steps to convert a decimal number to binary:

·       Divide the number by 2.

·       Store the remainder (0 or 1).

·       Repeat with the quotient until it becomes 0.

·       Read the remainders in reverse order to get the binary number.

 For example, Consider a decimal number 13

13 ÷ 2 = 6, remainder 1

6 ÷ 2 = 3, remainder 0

3 ÷ 2 = 1, remainder 1

1 ÷ 2 = 0, remainder 1

Binary: 1101 (reading from bottom to top)

 Input Format : A positive integer, n

13

Output Format : Binary number

1101

#
def decimal_to_binary(n):
    # Base case: If the number is 0, return an empty string
    if n == 0:
        return ""
    
    # Recursive case: divide n by 2 and add the remainder (n % 2)
    remainder = n % 2
    # Recursively call the function for the quotient
    return decimal_to_binary(n // 2) + str(remainder)

# Input: a positive integer
n = int(input(""))

# If the number is 0, handle it as a special case
if n == 0:
    print("0",end="")
else:
    # Output: binary number
    print(decimal_to_binary(n),end="")
#


